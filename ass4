//Producer Consumer
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#define BUFFER_SIZE 10

int buffer[BUFFER_SIZE];
int count = 0, NUM_CONSUMERS, NUM_PRODUCERS;
sem_t empty, full;
pthread_mutex_t mutex;

void *producer(void *arg) {
    int producer_id = *((int *)arg);
    int item;
    while (1) {
        item = rand() % 100;

        if (count == BUFFER_SIZE) {
            printf("\t\t\t\t\t\t\t\t\t\t\tBUFFER FULL\n");
            sleep(1);
        }
		sem_wait(&empty);
        pthread_mutex_lock(&mutex);

        buffer[count++] = item;
        printf("\t\t\t\tProducer %d produced Item Number: I0%d\n", producer_id, item);
        printf("\t\t\t\tBuffer Size: %d\n", count);

        pthread_mutex_unlock(&mutex);
        sem_post(&full);
        sleep(1);
    }
    pthread_exit(NULL);
}

void *consumer(void *arg) {
    int consumer_id = *((int *)arg);
    int item;
    while (1) {
		
        if (count == 0) {
            printf("\t\t\t\t\t\t\t\t\t\t\tBUFFER EMPTY\n");
            sleep(2);
        }
        sem_wait(&full);
        pthread_mutex_lock(&mutex);

        item = buffer[--count];
        printf("\t\t\t\t\t\t\t\t\t\t\t\t\t\tConsumer %d consumed Item Number: I0%d\n", consumer_id, item);
        printf("\t\t\t\t\t\t\t\t\t\t\t\t\t\tBuffer Size: %d\n", count);

        pthread_mutex_unlock(&mutex);
        sem_post(&empty);
        sleep(2);
    }
    pthread_exit(NULL);
}

int main() {
    printf("\t\t\t\t\t\t\t\t\t\tProducer Consumer Problem\n\n");
    printf("\t\t\t\tEnter Consumer and Producer count[P C]: ");
	scanf("%d %d",&NUM_PRODUCERS, &NUM_CONSUMERS);

    pthread_t producer_threads[NUM_PRODUCERS];
    pthread_t consumer_threads[NUM_CONSUMERS];

    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    pthread_mutex_init(&mutex, NULL);

    int producer_ids[NUM_PRODUCERS];
    int consumer_ids[NUM_CONSUMERS];

    for (int i = 0; i < NUM_PRODUCERS; i++) {
        producer_ids[i] = i + 1;
        pthread_create(&producer_threads[i], NULL, producer, &producer_ids[i]);
    }

    for (int i = 0; i < NUM_CONSUMERS; i++) {
        consumer_ids[i] = i + 1;
        pthread_create(&consumer_threads[i], NULL, consumer, &consumer_ids[i]);
    }

    for (int i = 0; i < NUM_PRODUCERS; i++) {
        pthread_join(producer_threads[i], NULL);
    }

    for (int i = 0; i < NUM_CONSUMERS; i++) {
        pthread_join(consumer_threads[i], NULL);
    }

    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);
    
    return 0;
}
//Reader Writer
sem_t mutex;        // Mutex to control access to shared variables
sem_t wrt;          // Semaphore to control writer priority

int read_count = 0; // Number of readers currently reading
int var = 0;

void *reader(void *arg) 
{
    int reader_id = *(int *)arg;

    while (1) 
    {
        sem_wait(&mutex);
        read_count++;
        
        if (read_count == 1) 
        {
            sem_wait(&wrt); // First reader locks the writer out
        }
        sem_post(&mutex);

        // Reading operation
        printf("Reader %d is reading.\n", reader_id);
        printf("Value read by reader is: %d \n", var);

        sem_wait(&mutex);
        read_count--;
        if (read_count == 0) 
        {
            sem_post(&wrt); // Last reader unlocks the writer
        }
        sem_post(&mutex);

        // Simulate some delay for reading
        sleep(10); // Sleep for 1 second
    }
    
    
}


void *writer(void *arg) 
{
    int writer_id = *(int *)arg;

    while (1) 
    {
        int sem_val;
        sem_getvalue(&wrt, &sem_val);
        if (sem_val == 0) {
            printf("writeSemaphore is locked by readers.\n");
        } 
        else {
            printf("writeSemaphore is unlocked.\n");
        }

        sem_wait(&wrt); // Writer wants to write, block readers
        
        // Writing operation
        printf("Writer %d is writing.\n", writer_id);
        var++;
        
        printf("Value updated by writer: %d \n", var);
        sem_post(&wrt); // Writer is done writing, allow readers and other writers


        // Simulate some delay for writing
        sleep(20); // Sleep for 2 seconds
        
    }
    
}

int main() 
{
    int num_readers, num_writers;

    printf("Enter the number of readers: ");
    scanf("%d", &num_readers);

    printf("Enter the number of writers: ");
    scanf("%d", &num_writers);
    
    printf("Initial value of data is: %d \n", var);

    pthread_t readers[num_readers], writers[num_writers];
    int reader_ids[num_readers], writer_ids[num_writers];

    // Initialize semaphores
    sem_init(&mutex, 0, 1);
    sem_init(&wrt, 0, 1);

    // Create reader threads
    for (int i = 0; i < num_readers; i++) 
    {
        reader_ids[i] = i + 1;
        pthread_create(&readers[i], NULL, reader, &reader_ids[i]);
    }

    // Create writer threads
    for (int i = 0; i < num_writers; i++) 
    {
        writer_ids[i] = i + 1;
        pthread_create(&writers[i], NULL, writer, &writer_ids[i]);
    }

    // Join threads
    for (int i = 0; i < num_readers; i++) 
    {
        pthread_join(readers[i], NULL);
    }
    
    for (int i = 0; i < num_writers; i++) 
    {
        pthread_join(writers[i], NULL);
    }

    // Clean up semaphores
    sem_destroy(&mutex);
    sem_destroy(&wrt);

    return 0;
    
}
