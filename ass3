#include <stdio.h>

struct process {
    int arrival_time;
    int burst_time;
    int remaining_time;
    int completion_time;
    int id;
};

void scheduling(struct process process[], int time_quantum, int n) {
    int current_time = 0;
    int remaining_process = n;

    while (remaining_process > 0) {
        for (int i = 0; i < n; i++) {
            if (process[i].arrival_time <= current_time && process[i].remaining_time > 0) {
                if (process[i].remaining_time <= time_quantum) {
                    current_time += process[i].remaining_time;
                    process[i].remaining_time = 0;
                    process[i].completion_time = current_time;
                    remaining_process--;
                } else {
                    current_time += time_quantum;
                    process[i].remaining_time -= time_quantum;
                }
            }
        }
    }
}


int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
    }

    int time_quantam;
    printf("Enter time quantum: ");
    scanf("%d", &time_quantam);

    scheduling(processes, time_quantam, n);

    printf("\nProcess\tArrival Time\tBurst Time\tCompletion Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].arrival_time,
               processes[i].burst_time, processes[i].completion_time);
    }

    return 0;
}
