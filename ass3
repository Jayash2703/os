1)SJF
#include <stdio.h>
#include <stdbool.h>
struct Process {
int id;
int arrivalTime;
int burstTime;
int remainingTime;
};
void sortByArrivalTime(struct Process processes[], int n) {
for (int i = 0; i < n - 1; i++) {
for (int j = 0; j < n - i - 1; j++) {
if (processes[j].arrivalTime > processes[j + 1].arrivalTime) {
struct Process temp = processes[j];
processes[j] = processes[j + 1];
processes[j + 1] = temp;
}
}
}
}
int findShortestJob(struct Process processes[], int n, int currentTime) {
int shortestJob = -1;
int shortestBurst =99999;
for (int i = 0; i < n; i++) {
if (processes[i].arrivalTime <= currentTime && processes[i].remainingTime > 0 &&
processes[i].remainingTime < shortestBurst) {
shortestJob = i;
shortestBurst = processes[i].remainingTime;
}
}
return shortestJob;
}
int main() {
int n;
printf("Enter the number of processes: ");
scanf("%d", &n);
struct Process processes[n];
for (int i = 0; i < n; i++) {
processes[i].id = i + 1;
printf("Enter arrival time and burst time for process %d: ", processes[i].id);
scanf("%d %d", &processes[i].arrivalTime, &processes[i].burstTime);
processes[i].remainingTime = processes[i].burstTime;
}
sortByArrivalTime(processes, n);
int currentTime = 0;
int completedProcesses = 0;
int shortestJob = -1;
int completionTime[n];
int turnaroundTime[n];
int waitingTime[n];
while (completedProcesses < n) {
shortestJob = findShortestJob(processes, n, currentTime);
if (shortestJob == -1) {
currentTime++;
continue;
}
processes[shortestJob].remainingTime--;
currentTime++;
if (processes[shortestJob].remainingTime == 0) {
completedProcesses++;
completionTime[shortestJob] = currentTime;
}
}
printf("\nProcess\tArrival\tBurst\tCompletion\tTurnaround\tWaiting\n");
for (int i = 0; i < n; i++) {
turnaroundTime[i] = completionTime[i] - processes[i].arrivalTime;
waitingTime[i] = turnaroundTime[i] - processes[i].burstTime;
printf("%d\t%d\t%d\t%d\t%d\t%d\n", processes[i].id, processes[i].arrivalTime, 
processes[i].burstTime,
completionTime[i], turnaroundTime[i], waitingTime[i]);
}
return 0;
}



RR

#include <stdio.h>

struct process {
    int arrival_time;
    int burst_time;
    int remaining_time;
    int completion_time;
    int id;
};

void scheduling(struct process process[], int time_quantum, int n) {
    int current_time = 0;
    int remaining_process = n;

    while (remaining_process > 0) {
        for (int i = 0; i < n; i++) {
            if (process[i].arrival_time <= current_time && process[i].remaining_time > 0) {
                if (process[i].remaining_time <= time_quantum) {
                    current_time += process[i].remaining_time;
                    process[i].remaining_time = 0;
                    process[i].completion_time = current_time;
                    remaining_process--;
                } else {
                    current_time += time_quantum;
                    process[i].remaining_time -= time_quantum;
                }
            }
        }
    }
}


int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
    }

    int time_quantam;
    printf("Enter time quantum: ");
    scanf("%d", &time_quantam);

    scheduling(processes, time_quantam, n);

    printf("\nProcess\tArrival Time\tBurst Time\tCompletion Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].arrival_time,
               processes[i].burst_time, processes[i].completion_time);
    }

    return 0;
}
