#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>

int available[100], need[100][100], max[100][100], allot[100][100], isFinished[100], safesequence[100];
void isSafe(int N, int M) {
    int count = 0, newavailable[100], i, j;
    for (j = 0; j < M; j++) {
        newavailable[j] = available[j];
    }

    for (i = 0; i < N; i++) {
        isFinished[i] = 0;
    }

    while (count < N) {
        bool canAllot = false;
        for (i = 0; i < N; i++) {
            if (isFinished[i] == 0) {
                bool canAllocate = true;  // Initialize to true for the current process
                for (j = 0; j < M; j++) {
                    if (newavailable[j] < need[i][j]) {
                        canAllocate = false;
                        break;
                    }
                }

                if (canAllocate) {
                    for (j = 0; j < M; j++) {
                        newavailable[j] += allot[i][j];
                    }
                    safesequence[count++] = i;
                    isFinished[i] = 1;
                    canAllot = true;
                }
            }
        }

        if (canAllot == false) {
            printf("System is not safe\n");
            return;
        }
    }

    printf("The Safe Sequence is:\n");
    for (i = 0; i < N; i++) {
        printf("P%d ", safesequence[i]);
    }
    printf("\n");
}

int main(){
   int i,j,N,M;
   printf("Enter The No. Of Processes :\n");
   scanf("%d",&N);
   printf("Enter The No. Of Resources :\n");
   scanf("%d",&M);
   printf("Enter Available Resources :\n");
   for(j=0;j<M;j++){
    scanf("%d",&available[j]);
   }
   printf("Enter Allocated resource Matrix\n");
   for(i=0;i<N;i++){
    for(j=0;j<M;j++){
        scanf("%d",&allot[i][j]);
    }
   }
   printf("Enter Max resource Matrix\n");
   for(i=0;i<N;i++){
    for(j=0;j<M;j++){
        scanf("%d",&max[i][j]);
    }
   }
   
   for(i=0;i<N;i++){
    for(j=0;j<M;j++){
        need[i][j]=max[i][j]-allot[i][j];
        // printf("%d",need[i][j]);
        
    }
   }
   isSafe(N,M);
   while(1){
    int process;
    printf("Enter the process number for resource request: ");
    scanf("%d", &process);

    if (process >= 0 && process < N) {
        int arr[100];
        bool canAllocate=true;
        printf("Enter the requested instances of each resource:\n");
        for (j = 0; j < M; j++)
            scanf("%d", &arr[j]);

        for (j = 0; j < M; j++) {
            if (arr[j] > need[process][j] || arr[j] > available[j]) {
                canAllocate=false;
                printf("Request cannot be granted.\n");
                break;
            }
        }

        if (canAllocate) {
            for (j = 0; j < M; j++) {
                available[j] -= arr[j];
                allot[process][j] += arr[j];
                need[process][j] -= arr[j];
            }
            isSafe(N, M);
        }
    } else {
        printf("Invalid process number.\n");
        return -1;
    }
    }
   
    return 0;
}
