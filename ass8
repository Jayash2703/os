// SCAN ALGORITHM
#include <stdio.h>
#include <stdlib.h>
int main()
{
int queue[20], n, head, i, j, k, seek = 0, max, diff, temp, queue1[20], queue2[20],

temp1 = 0, temp2 = 0;

float avg;
printf("Enter the max range of disk\n");
scanf("%d", &max);
printf("Enter the initial head position\n");
scanf("%d", &head);
printf("Enter the size of queue request\n");
scanf("%d", &n);
printf("Enter the queue of disk positions to be read\n");
for (i = 1; i <= n; i++)
{
scanf("%d", &temp);
//don queue gheychya eka queue madhe head peksha mothe eka queue madhe chote

if (temp >= head)
{
queue1[temp1++] = temp;
// temp1++;
}
else
{
queue2[temp2] = temp;
temp2++;
}
}
//donhi queue sort karayche
for (i = 0; i < temp1 - 1; i++)
{
for (j = i + 1; j < temp1; j++)
{
if (queue1[i] > queue1[j])
{
temp = queue1[i];
queue1[i] = queue1[j];
queue1[j] = temp;
}
}
}
for (i = 0; i < temp2 - 1; i++)
{
for (j = i + 1; j < temp2; j++)
{
if (queue2[i] < queue2[j])
{
temp = queue2[i];
queue2[i] = queue2[j];
queue2[j] = temp;
}
}
}


for (i = 1, j = 0; j < temp1; i++, j++)
queue[i] = queue1[j];
queue[i] = max;
for (i = temp1 + 2, j = 0; j < temp2; i++, j++)
queue[i] = queue2[j];
queue[0] = head;
for (j = 0; j < n + 1; j++)
{
diff = abs(queue[j + 1] - queue[j]);
seek += diff;
printf("Disk head moves from %d to %d with seek %d\n", queue[j], queue[j + 1],
diff);

}
printf("Total seek time is %d\n", seek);
avg = seek / (float)n;
printf("Average seek time is %f\n", avg);
return 0;
}


//FCFS ALGORITHM
#include <stdio.h>
#include <stdlib.h>
int main() {
int queue[100], n, head, i, seek = 0;
float avg_seek=0;
printf("Enter the number of requests: ");
scanf("%d", &n);
printf("Enter the requests: ");
for (i = 0; i < n; i++) {
scanf("%d", &queue[i]);
}
printf("Enter the initial head position: ");
scanf("%d", &head);
for (i = 0; i < n; i++) {
seek += abs(head - queue[i]);
head = queue[i];
}
avg_seek=seek/n;
printf("Total number of seek operations: %d\n", seek);
printf("Average Seek Time is %f\n",avg_seek);
return 0;
}
//*************************************************************************************************
//sstf

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int main() {
    int n, head, seek = 0;
    int INT_MAX=99999999;
    printf("-----SSTF Disk Scheduling Algorithm-----\n");
    printf("Enter the number of requests: ");
    scanf("%d", &n);
    
    int requests[n];
    int visited[n];

    printf("Enter the request queue: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
        visited[i] = 0;
    }

    printf("Enter initial head position: ");
    scanf("%d", &head);

    printf("\nSequence of head movements:\n");

    for (int i = 0; i < n; i++) {
        int min_seek = INT_MAX;
        int next_index = -1;

        for (int j = 0; j < n; j++) {
            if (!visited[j]) {
                int seek_distance = abs(head - requests[j]);
                if (seek_distance < min_seek) {
                    min_seek = seek_distance;
                    next_index = j;
                }
            }
        }

        if (next_index != -1) {
            visited[next_index] = 1;

            seek += min_seek;
            printf("Disk head moves from %d to %d with seek %d\n", head, requests[next_index], min_seek);
            head = requests[next_index];
        }
    }

    printf("\nTotal seek time: %d\n", seek);
    double avg_seek_time = (double)seek / n;
    printf("Average seek time: %f\n", avg_seek_time);

    return 0;
}
//********************************************************************************************
//c-look
#include <stdio.h>
#include <stdlib.h>
int main()
{
int queue[20], n, head, i, j, k, seek = 0, max, diff, temp, queue1[20], queue2[20],

temp1 = 0, temp2 = 0;

float avg;
printf("Enter the max range of disk\n");
scanf("%d", &max);
printf("Enter the initial head position\n");
scanf("%d", &head);
printf("Enter the size of queue request\n");
scanf("%d", &n);
printf("Enter the queue of disk positions to be read\n");
for (i = 1; i <= n; i++)
{
scanf("%d", &temp);
//don queue gheychya eka queue madhe head peksha mothe eka queue madhe chote

if (temp >= head)
{
queue1[temp1++] = temp;
// temp1++;
}
else
{
queue2[temp2] = temp;
temp2++;
}
}
//donhi queue sort karayche
for (i = 0; i < temp1 - 1; i++)
{
for (j = i + 1; j < temp1; j++)
{
if (queue1[i] > queue1[j])
{
temp = queue1[i];
queue1[i] = queue1[j];
queue1[j] = temp;
}
}
}
for (i = 0; i < temp2 - 1; i++)
{
for (j = i + 1; j < temp2; j++)
{
if (queue2[i] > queue2[j])
{
temp = queue2[i];
queue2[i] = queue2[j];
queue2[j] = temp;
}
}
}


for (i = 1, j = 0; j < temp1; i++, j++)
queue[i] = queue1[j];
for (i = temp1 + 1, j = 0; j < temp2; i++, j++)
queue[i] = queue2[j];
queue[0] = head;
for (j = 0; j < n ; j++)
{
diff = abs(queue[j + 1] - queue[j]);
seek += diff;
printf("Disk head moves from %d to %d with seek %d\n", queue[j], queue[j + 1],
diff);

}
printf("Total seek time is %d\n", seek);
avg = seek / (float)n;
printf("Average seek time is %f\n", avg);
return 0;
}
